// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas = ["public"]
}

/// User model for authentication and system access
/// Contains basic user information and references to related organization
model User {
  id             String        @id @map("id") @db.Uuid
  name           String?       /// User's full name
  role           UserRole      /// User's role in the system
  organizationId String?       /// Optional reference to the user's organization
  organization   Organization? @relation(fields: [organizationId], references: [id])
  phoneNumber    String?       /// Optional user contact number
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  @@map("users")
  @@schema("public")
}

/// Defines possible user roles in the system
enum UserRole {
  admin          /// System administrator with full access
  client         /// Client with limited access to their own data
  teamMember     /// Internal team member with standard permissions
  
  @@schema("public")
}

/// Organization plan types
enum OrganizationPlan {
  creator        /// Creator plan subscription
  studio         /// Studio plan subscription
  
  @@schema("public")
}

/// Organization model representing client companies
/// Acts as a container for users and contracts
model Organization {
  id          String            @id @default(uuid())
  code        String            @unique /// 5-digit unique organization code
  name        String            /// Organization display name
  email       String?           /// Primary contact email
  phone       String?           /// Primary contact phone
  company     String            /// Legal company name
  industry    String?           /// Industry or sector
  address     String?           /// Physical address
  plan        OrganizationPlan  /// Subscription plan type (creator or studio)
  notes       String?           /// Additional notes
  status      ClientStatus      /// Active or inactive status
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  users       User[]            /// Users associated with this organization
  invitations Invitation[]      /// Pending invitations to join
  contracts   Contract[]        /// Contracts with this organization
  
  @@schema("public")
}

// Invitation model
model Invitation {
  id             String           @id @default(uuid())
  email          String
  name           String
  role           UserRole
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id])
  token          String           @unique
  status         InvitationStatus
  expiresAt      DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  @@schema("public")
}

enum InvitationStatus {
  pending
  accepted
  expired
  
  @@schema("public")
}

enum ClientStatus {
  active
  inactive
  
  @@schema("public")
}

// Contract model
model Contract {
  id             String         @id @default(uuid())
  title          String
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id])
  packageType    PackageType
  startDate      DateTime
  endDate        DateTime?
  totalMonths    Int?
  syncCallDay    Int?
  value          Float
  status         ContractStatus
  description    String?
  terms          String?
  files          String[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  projects       Project[]
  
  @@schema("public")
}

enum PackageType {
  creator
  studio
  
  @@schema("public")
}

enum ContractStatus {
  draft
  sent
  signed
  active
  completed
  cancelled
  
  @@schema("public")
}

// Project model
model Project {
  id          String        @id @default(uuid())
  name        String
  contractId  String
  contract    Contract      @relation(fields: [contractId], references: [id])
  clientId    String
  description String?
  startDate   DateTime
  dueDate     DateTime?
  status      ProjectStatus
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@schema("public")
}

enum ProjectStatus {
  planning
  in_progress @map("in-progress")
  review
  completed
  on_hold     @map("on-hold")
  
  @@schema("public")
}
